@page "/EditPost/{PostId:int}"
@using Markdig
@using Microsoft.AspNetCore.Identity
@using Blogger.Data
@using System.Security.Claims
@inject UserManager<User> UserManager
@inject PostService Service
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<style>
    .row {
        flex: 1;
        flex-direction: row;
        flex-wrap: wrap;
        width: 100%;
        height: 100%;
    }
    
    .column {
        display: flex;
        flex-direction: column;
        flex-basis: 100%;
        flex: 1;
        height: 100%;
    }
    textarea {
        height: 100%;
        resize: none;
    }
    
    .container {
        height: 100%;
    }
    
    .rendered {
        overflow: auto;
    }
    
</style>

@if (_post != null)
{
    <h3>Edit Post</h3>

    <div class="container">

        <div class="row">
            <div class="column">
                <input class="mb-2" @bind="_title" @bind:event="oninput" placeholder="Post title"/>
                <textarea @bind="_postMarkdown" @bind:event="oninput" placeholder="post body"></textarea>

                <div class="mt-3">
                    
                    <button class="btn btn-danger" @onclick="DeletePost">Delete Post</button>
                    <button class="btn btn-primary" @onclick="UpdatePost">Save Changes</button>
                    
                </div>

            </div>

            <div class="column rendered">
                <h1>@_title</h1>
                
                @((MarkupString)Markdown.ToHtml(_postMarkdown, _pipeline))
            </div>

        </div>

    </div>
}
else
{
    <h1>Error while trying to fetch the post. Does it exist?</h1>
}



@code {

    [Parameter]
    public int PostId { get; set; }

    MarkdownPipeline _pipeline;
    string _postMarkdown = "";
    string _title = "";
    
    User? _user;

    Post? _post;
    
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        if (user.Identity.IsAuthenticated)
        {
            _user = await UserManager.GetUserAsync(user);
        }

        _pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().UseSoftlineBreakAsHardlineBreak().Build();
        _post = await Service.GetPostById(PostId);

        _title = _post?.Title ?? "";
        _postMarkdown = _post?.Body ?? "";
        

    }

    async Task UpdatePost()
    {
        if (_user != null && _post != null)
        {
            _post.Title = _title;
            _post.Body = _postMarkdown;
            await Service.UpdatePost(_post);
        }
        
    }


    async Task DeletePost()
    {
        await Service.DeletePost(_post);
        NavManager.NavigateTo("/Profile");
    }

}